})
lapply(X = dataset_list, FUN = function(x) {
FeatureScatter(x, "nCount_RNA", "nFeature_RNA",pt.size = 0.5)
})
print("before QC-filter")
lapply(X = dataset_list, FUN = function(x) {
x
})
dataset_list <- lapply(X = dataset_list, FUN = function(x) {
x <- subset(x, percent.mito <= 5) # consider using 5% as cutoff
x <- subset(x, nCount_RNA >= 2200 & nCount_RNA <= 12000)
})
print("after QC-filter")
lapply(X = dataset_list, FUN = function(x) {
x
})
ncores <- 6 #use 6 cores
################
#### TIL_Atlas##
################
ref <- load.reference.map(ref="C:\\Users\\pengx\\Documents\\ref_TILAtlas_mouse_v1.rds")
refCols <- c("#edbe2a", "#A58AFF", "#53B400", "#F8766D", "#00B6EB", "#d1cfcc", "#FF0000", "#87f6a5", "#e812dd")
functional.cluster.colors <- hue_pal()(9)
functional.cluster.colors <- functional.cluster.colors[c(4, 3, 2, 5, 1, 6, 7,8,9)]
names(functional.cluster.colors) <- levels(ref$functional.cluster)
#check ref
DimPlot(ref, reduction = "umap", label = TRUE, pt.size = 0.7, group.by = "functional.cluster",
dims = c(2, 1), cols = functional.cluster.colors) + NoLegend() + theme(aspect.ratio = 1) +
scale_x_reverse() + scale_y_reverse() + ggtitle("Reference CD8 TIL atlas")
#querydata <- SplitObject(dataset.combined, split.by = "sample")
query.projected <- make.projection(dataset_list, ref = ref,ncores = ncores,filter.cells = FALSE) #dataset is prefiltered, so no need to filter here
pll <- list()
for (i in seq_along(query.projected)) {
s <- names(query.projected)[i]
query.projected[[s]] <- cellstate.predict(ref = ref, query = query.projected[[s]])
pll[[i]] <- plot.projection(ref, query.projected[[s]], pointsize = 1.2, linesize = 0.3,
cols = functional.cluster.colors) + theme_bw() + theme(aspect.ratio =1) +
scale_x_reverse() + scale_y_reverse() + coord_flip() + NoLegend() + ggtitle(paste0(unique(query.projected[[s]]$sample), " projected to reference"))
}
g <- do.call("arrangeGrob", c(pll, ncol = 2))
plot(g)
#percentage
cols_use <- functional.cluster.colors[c(4, 3, 2, 5, 1, 6, 7,8,9)]
states_all <- levels(factor(names(functional.cluster.colors), levels = names(cols_use)))
m <- matrix(nrow = length(names(query.projected)), ncol = length(states_all))
rownames(m) <- names(query.projected)
colnames(m) <- states_all
for (i in seq_along(query.projected)) {
tb <- table(factor(query.projected[[i]]$functional.cluster, levels = states_all))
m[i, ] <- tb * 100/sum(tb)
}
melt <- melt(m)
colnames(melt) <- c("sample", "Cell_state", "Percent")
p <- ggplot(melt, aes(x = sample, y = Percent, fill = Cell_state)) + geom_bar(stat = "identity",
position = "stack") + scale_fill_manual(values = functional.cluster.colors) +
theme_light() + theme(legend.position = "right")
p
#copy over the functional cluster assignment#
dataset_list$CD8_Seurat_obj$pred_cell_type_TIL <- query.projected$CD8_Seurat_obj$functional.cluster
dataset_list$CD8_Seurat_obj$pred_cell_type_TIL.conf <- query.projected$CD8_Seurat_obj$functional.cluster.conf
dataset_list$TS20_Seurat_obj$pred_cell_type_TIL <- query.projected$TS20_Seurat_obj$functional.cluster
dataset_list$TS20_Seurat_obj$pred_cell_type_TIL.conf <- query.projected$TS20_Seurat_obj$functional.cluster.conf
#######################
#### use LCMV_Atlas####
#######################
ref <- load.reference.map(ref="C:\\Users\\pengx\\Documents\\ref_LCMV_Atlas_mouse_v1.rds")
refCols <- c("#edbe2a", "#A58AFF", "#53B400", "#F8766D", "#00B6EB", "#d1cfcc", "#FF0000", "#87f6a5", "#e812dd")
functional.cluster.colors <- hue_pal()(7)
functional.cluster.colors <- functional.cluster.colors[c(4, 3, 2, 5, 1, 6, 7)]
names(functional.cluster.colors) <- levels(ref$functional.cluster)
#check out the ref
DimPlot(ref, reduction = "umap", label = TRUE, pt.size = 0.7, group.by = "functional.cluster",
dims = c(2, 1), cols = functional.cluster.colors) + NoLegend() + theme(aspect.ratio = 1) +
scale_x_reverse() + scale_y_reverse() + ggtitle("Reference CD8 LCMV atlas")
#querydata <- SplitObject(dataset.combined, split.by = "sample")
query.projected <- make.projection(dataset_list, ref = ref,ncores = ncores, filter.cells = FALSE) #dataset is prefiltered, so no need to filter here
pll <- list()
for (i in seq_along(query.projected)) {
s <- names(query.projected)[i]
query.projected[[s]] <- cellstate.predict(ref = ref, query = query.projected[[s]])
pll[[i]] <- plot.projection(ref, query.projected[[s]], pointsize = 1.2, linesize = 0.3,
cols = functional.cluster.colors) + theme_bw() + theme(aspect.ratio =1) +
scale_x_reverse() + scale_y_reverse() + coord_flip() + NoLegend() + ggtitle(paste0(unique(query.projected[[s]]$sample), " projected to reference"))
}
g <- do.call("arrangeGrob", c(pll, ncol = 2))
plot(g)
#percentage
cols_use <- functional.cluster.colors[c(4, 3, 2, 5, 1, 6, 7)]
states_all <- levels(factor(names(functional.cluster.colors), levels = names(cols_use)))
m <- matrix(nrow = length(names(query.projected)), ncol = length(states_all))
rownames(m) <- names(query.projected)
colnames(m) <- states_all
for (i in seq_along(query.projected)) {
tb <- table(factor(query.projected[[i]]$functional.cluster, levels = states_all))
m[i, ] <- tb * 100/sum(tb)
}
melt <- melt(m)
colnames(melt) <- c("sample", "Cell_state", "Percent")
p <- ggplot(melt, aes(x = sample, y = Percent, fill = Cell_state)) + geom_bar(stat = "identity",
position = "stack") + scale_fill_manual(values = functional.cluster.colors) +
theme_light() + theme(legend.position = "right")
p
#migrate the the functional cluster assignment
dataset_list$CD8_Seurat_obj$pred_cell_type_LCMV <- query.projected$CD8_Seurat_obj$functional.cluster
dataset_list$CD8_Seurat_obj$pred_cell_type_LCMV.conf <- query.projected$CD8_Seurat_obj$functional.cluster.conf
dataset_list$TS20_Seurat_obj$pred_cell_type_LCMV <- query.projected$TS20_Seurat_obj$functional.cluster
dataset_list$TS20_Seurat_obj$pred_cell_type_LCMV.conf <- query.projected$TS20_Seurat_obj$functional.cluster.conf
dataset_list <- lapply(X = dataset_list, FUN = function(x) {
x <- NormalizeData(x, normalization.method = "LogNormalize", scale.factor = 10000)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
# select features that are repeatedly variable across datasets for integration
features <- SelectIntegrationFeatures(object.list = dataset_list)
#find anchors
dataset.anchors <- FindIntegrationAnchors(object.list = dataset_list, anchor.features = features)
#combine
dataset.combined <- IntegrateData(anchorset = dataset.anchors)
DefaultAssay(dataset.combined) <- "integrated"
# Run the standard workflow for visualization and clustering
dataset.combined <- ScaleData(dataset.combined, verbose = FALSE)
dataset.combined <- RunPCA(dataset.combined, npcs = 30, verbose = FALSE, seed.use = 42)
dataset.combined <- RunUMAP(dataset.combined, reduction = "pca", dims = 1:30, seed.use = 42)
dataset.combined <- FindNeighbors(dataset.combined, reduction = "pca", dims = 1:30)
dataset.combined <- FindClusters(dataset.combined, resolution = 0.5)
#check number of cells in each sample in the combined dataset
table(dataset.combined@meta.data[["orig.ident"]])
# Visualization
p1 <- DimPlot(dataset.combined, reduction = "umap", group.by = "sample") + ggtitle("UMAP")
p2 <- DimPlot(dataset.combined, reduction = "umap", label = TRUE, repel = TRUE) + ggtitle("Cluster assignment")
p1 + p2
#visualize the two conditions side-by-side
DimPlot(dataset.combined, reduction = "umap", split.by = "sample", pt.size = 0.9)
## Show cell state prediction on Umap
#factorize
dataset.combined$pred_cell_type_LCMV_fac <- as.factor(dataset.combined$pred_cell_type_LCMV)
dataset.combined$pred_cell_type_TIL_fac <- as.factor(dataset.combined$pred_cell_type_TIL)
split_datasets <- SplitObject(dataset.combined, split.by = "sample")
print("cell state prediction in CD8 sample (ref=TIL)")
FeaturePlot(split_datasets$CD8, features = c("pred_cell_type_TIL.conf"), split.by = c("pred_cell_type_TIL_fac"),reduction = "umap", cols = c("lightgrey", "darkred")) & theme(plot.title = element_text(size = 14), legend.position = c(0.1,0.2))
print("cell state prediction in TS20 sample (ref=TIL)")
FeaturePlot(split_datasets$TS20, features = c("pred_cell_type_TIL.conf"), split.by = c("pred_cell_type_TIL_fac"),reduction = "umap", cols = c("lightgrey", "darkred")) & theme(plot.title = element_text(size = 14), legend.position = c(0.1,0.2))
print("cell state prediction in CD8 sample (ref=LCMV)")
FeaturePlot(split_datasets$CD8, features = c("pred_cell_type_LCMV.conf"), split.by = c("pred_cell_type_LCMV_fac"),reduction = "umap", cols = c("lightgrey", "darkred")) & theme(plot.title = element_text(size = 14), legend.position = c(0.1,0.2))
print("cell state prediction in TS20 sample (ref=LCMV)")
FeaturePlot(split_datasets$TS20, features = c("pred_cell_type_LCMV.conf"), split.by = c("pred_cell_type_LCMV_fac"),reduction = "umap", cols = c("lightgrey", "darkred")) & theme(plot.title = element_text(size = 14), legend.position = c(0.1,0.2))
dittoBarPlot(dataset.combined, var="pred_cell_type_TIL", group.by = "seurat_clusters")
dittoBarPlot(dataset.combined, var="pred_cell_type_LCMV", group.by = "seurat_clusters")
dittoBarPlot(dataset.combined, var="seurat_clusters", group.by = "pred_cell_type_TIL")
dittoBarPlot(dataset.combined, var="seurat_clusters", group.by = "pred_cell_type_LCMV")
hist(split_datasets$CD8$pred_cell_type_TIL.conf)
hist(split_datasets$TS20$pred_cell_type_TIL.conf)
hist(split_datasets$CD8$pred_cell_type_LCMV.conf)
hist(split_datasets$TS20$pred_cell_type_LCMV.conf)
options(max.print=50) #print top 50 most abundant TCRs
sort(table(dataset.combined$t_cdr3s_aa), decreasing =TRUE)
options(max.print=50) #print top 50 most abundant TCRs
sort(table(subset(dataset.combined, subset = sample == "TS20")$t_cdr3s_aa), decreasing =TRUE)
options(max.print=50) #print top 50 most abundant TCRs
sort(table(subset(dataset.combined, subset = sample == "CD8")$t_cdr3s_aa), decreasing =TRUE)
if(file.exists("original_cluster_TCR.xlsx"))
{
file.remove("original_cluster_TCR.xlsx")
}
for(clu in sort(unique(dataset.combined$seurat_clusters)))
{
Obj_cluster <- subset(dataset.combined, idents = c(clu))
for(this_sample in unique(Obj_cluster$sample))
{
obj_cluster_sample <- subset(Obj_cluster, subset = sample == this_sample)
df <- table(obj_cluster_sample$t_cdr3s_aa) %>%
as.data.frame() %>%
arrange(desc(Freq))
colnames(df) <- c("TCR_clonetype", "Freq")
write.xlsx(df, file = "original_cluster_TCR.xlsx", sheetName=paste0("c_",clu, "_",this_sample), append=TRUE)
}
}
DefaultAssay(dataset.combined) <- "integrated"
cluster0_markers <- FindConservedMarkers(dataset.combined, ident.1 = 0, grouping.var = "sample", verbose = FALSE) # we can calculated the genes that are conserved markers irrespective of stimulation condition in cluster "ident.1"
FeaturePlot(dataset.combined, features = row.names(cluster0_markers)[1:24], ncol=6, min.cutoff = "q9")
cluster1_markers <- FindConservedMarkers(dataset.combined, ident.1 = 1, grouping.var = "sample", verbose = FALSE) # we can calculated the genes that are conserved markers irrespective of stimulation condition in cluster "ident.1"
FeaturePlot(dataset.combined, features = row.names(cluster1_markers)[1:24], ncol=6, min.cutoff = "q9")
cluster2_markers <- FindConservedMarkers(dataset.combined, ident.1 = 2, grouping.var = "sample", verbose = FALSE) # we can calculated the genes that are conserved markers irrespective of stimulation condition in cluster "ident.1"
FeaturePlot(dataset.combined, features = row.names(cluster2_markers)[1:24], ncol=6, min.cutoff = "q9")
cluster3_markers <- FindConservedMarkers(dataset.combined, ident.1 = 3, grouping.var = "sample", verbose = FALSE) # we can calculated the genes that are conserved markers irrespective of stimulation condition in cluster "ident.1"
FeaturePlot(dataset.combined, features = row.names(cluster3_markers)[1:24], ncol=6, min.cutoff = "q9")
cluster4_markers <- FindConservedMarkers(dataset.combined, ident.1 = 4, grouping.var = "sample", verbose = FALSE) # we can calculated the genes that are conserved markers irrespective of stimulation condition in cluster "ident.1"
FeaturePlot(dataset.combined, features = row.names(cluster4_markers)[1:24], ncol=6, min.cutoff = "q9")
cluster5_markers <- FindConservedMarkers(dataset.combined, ident.1 = 5, grouping.var = "sample", verbose = FALSE) # we can calculated the genes that are conserved markers irrespective of stimulation condition in cluster "ident.1"
FeaturePlot(dataset.combined, features = row.names(cluster5_markers)[1:24], ncol=6, min.cutoff = "q9")
cluster6_markers <- FindConservedMarkers(dataset.combined, ident.1 = 6, grouping.var = "sample", verbose = FALSE) # we can calculated the genes that are conserved markers irrespective of stimulation condition in cluster "ident.1"
FeaturePlot(dataset.combined, features = row.names(cluster6_markers)[1:24], ncol=6, min.cutoff = "q9")
cluster7_markers <- FindConservedMarkers(dataset.combined, ident.1 = 7, grouping.var = "sample", verbose = FALSE) # we can calculated the genes that are conserved markers irrespective of stimulation condition in cluster "ident.1"
FeaturePlot(dataset.combined, features = row.names(cluster7_markers)[1:24], ncol=6, min.cutoff = "q9")
cluster8_markers <- FindConservedMarkers(dataset.combined, ident.1 = 8, grouping.var = "sample", verbose = FALSE) # we can calculated the genes that are conserved markers irrespective of stimulation condition in cluster "ident.1"
FeaturePlot(dataset.combined, features = row.names(cluster8_markers)[1:24], ncol=6, min.cutoff = "q9")
cluster9_markers <- FindConservedMarkers(dataset.combined, ident.1 = 9, grouping.var = "sample", verbose = FALSE) # we can calculated the genes that are conserved markers irrespective of stimulation condition in cluster "ident.1"
FeaturePlot(dataset.combined, features = row.names(cluster9_markers)[1:24], ncol=6, min.cutoff = "q9")
cluster10_markers <- FindConservedMarkers(dataset.combined, ident.1 = 10, grouping.var = "sample", verbose = FALSE) # we can calculated the genes that are conserved markers irrespective of stimulation condition in cluster "ident.1"
FeaturePlot(dataset.combined, features = row.names(cluster10_markers)[1:24], ncol=6, min.cutoff = "q9")
cluster11_markers <- FindConservedMarkers(dataset.combined, ident.1 = 11, grouping.var = "sample", verbose = FALSE) # we can calculated the genes that are conserved markers irrespective of stimulation condition in cluster "ident.1"
FeaturePlot(dataset.combined, features = row.names(cluster11_markers)[1:24], ncol=6, min.cutoff = "q9")
#dotplot
top_n = 5
markers_to_plot = unique(c(row.names(cluster0_markers)[1:top_n],
row.names(cluster1_markers)[1:top_n],
row.names(cluster2_markers)[1:top_n],
row.names(cluster3_markers)[1:top_n],
row.names(cluster4_markers)[1:top_n],
row.names(cluster5_markers)[1:top_n],
row.names(cluster6_markers)[1:top_n],
row.names(cluster7_markers)[1:top_n],
row.names(cluster8_markers)[1:top_n],
row.names(cluster9_markers)[1:top_n],
row.names(cluster10_markers)[1:top_n],
row.names(cluster11_markers)[1:top_n]))
DotPlot(dataset.combined, features = markers_to_plot, cols = c("blue", "red"), dot.scale = 8, split.by = "sample") +
RotatedAxis()
DotPlot(dataset.combined, features = markers_to_plot, cols = c("blue", "red"), dot.scale = 8, split.by = "sample", group.by ="pred_cell_type_TIL_fac") +
RotatedAxis()
#violin plots
plots <- VlnPlot(dataset.combined, features = c(row.names(cluster0_markers)[1:top_n],
row.names(cluster1_markers)[1:top_n],
row.names(cluster2_markers)[1:top_n]),split.by = "sample", group.by = "pred_cell_type_TIL_fac",
pt.size = 0, combine = FALSE)
wrap_plots(plots = plots, ncol = 5)
plots <- VlnPlot(dataset.combined, features = c(row.names(cluster3_markers)[1:top_n],
row.names(cluster4_markers)[1:top_n],
row.names(cluster5_markers)[1:top_n]),split.by = "sample", group.by = "pred_cell_type_TIL_fac",
pt.size = 0, combine = FALSE)
wrap_plots(plots = plots, ncol = 5)
plots <- VlnPlot(dataset.combined, features = c(row.names(cluster6_markers)[1:top_n],
row.names(cluster7_markers)[1:top_n],
row.names(cluster8_markers)[1:top_n]),split.by = "sample", group.by = "pred_cell_type_TIL_fac",
pt.size = 0, combine = FALSE)
wrap_plots(plots = plots, ncol = 5)
plots <- VlnPlot(dataset.combined, features = c(row.names(cluster9_markers)[1:top_n],
row.names(cluster10_markers)[1:top_n],
row.names(cluster11_markers)[1:top_n]),split.by = "sample", group.by = "pred_cell_type_TIL_fac",
pt.size = 0, combine = FALSE)
wrap_plots(plots = plots, ncol = 5)
DoHeatmap(dataset.combined, features = top10$gene)
dataset.combined.markers %>%
group_by(cluster) %>%
top_n(n = 10, wt = avg_log2FC) -> top10
dataset.combined.markers <- FindAllMarkers(dataset.combined, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
dataset.combined.markers %>%
group_by(cluster) %>%
top_n(n = 10, wt = avg_log2FC) -> top10
DoHeatmap(dataset.combined, features = top10$gene)
library(Seurat)
mtcars
mtcars$mpg
mtcars$mpg>=30
which(mtcars$mpg>=30)
mtcars[-which(mtcars$mpg>=30).]
mtcars[-which(mtcars$mpg>=30),]
mtcars[-which(is.na(mtcars$mpg)),]
is.na(mtcars$mpg)
which(is.na(mtcars$mpg))
which(mtcars$mpg>=30)
?which
?is.na
anyNA()
anyNA(mtcars$mpg>=30)
which(is.na(mtcars$mpg))
is.na(mtcars$mpg)
mtcars
mtcars[-which(is.na(mtcars$mpg)),]
mtcars[which(is.na(mtcars$mpg)),]
mtcars[-which(is.na(mtcars$mpg)),]
filter
?filter
filter(mtcars,
)
mtcars[-1,]
mtcars[-0,]
mtcars[-c(1,2,3),]
is.na(mtcars$mpg)
which()
which(is.na(mtcars$mpg)
)
which(is.na(mtcars$mpg))
type(which(is.na(mtcars$mpg)))
typeof(which(is.na(mtcars$mpg)))
typeof(which(is.na(mtcars$mpg)))
typeof(which(mtcars$mpg>=3-)))
typeof(which(mtcars$mpg>=30)))
typeof(which(mtcars$mpg>=30))
which(mtcars$mpg>=30)
is.vector( which(mtcars$mpg>=30)
)
is.vector(which(mtcars$mpg>=30))
is.vector(which(is.na()))
typeof(which(is.na(mtcars$mpg)))
is.vector(which(is.na(mtcars$mpg))
)
is.vector(which(is.na(mtcars$mpg))
)
which(is.na(mtcars$mpg))
length(which(is.na(mtcars$mpg)))
if(!require(dplyr)){install.packages("dplyr")}
if(!require(DescTools)){install.packages("DescTools")}
if(!require(ggplot2)){install.packages("ggplot2")}
if(!require(grid)){install.packages("grid")}
if(!require(vcd)){install.packages("vcd")}
?mantelhaen.test
if(!require(dplyr)){install.packages("dplyr")}
if(!require(DescTools)){install.packages("DescTools")}
if(!require(ggplot2)){install.packages("ggplot2")}
if(!require(grid)){install.packages("grid")}
if(!require(vcd)){install.packages("vcd")}
#Figure 5b
#ds2181 (dsEcK2) feed before injection
sperm_assay <-
array(c(17, 16, 2, 6,
19, 6, 19, 2,
17, 4, 14, 2),
dim = c(2, 2, 3),
dimnames = list(
dsRNA = c("dsGFP", "ds2181"),
Response = c("sperm", "No_sperm"),
rep = c("1", "2", "3")))
#check the matrix array
sperm_assay
# Cochran-Mantel-Haenszel test
mantelhaen.test(sperm_assay)
#Figure 5c top
#ds2181 (dsEcK2) injection before feed
ovi_assay_inj_feed <-
array(c(2, 8, 16, 9,
2, 10, 32, 21,
3, 8, 20, 14,
0, 6, 42, 25),
dim = c(2, 2, 4),
dimnames = list(
dsRNA = c("dsGFP", "ds2181"),
Response = c("ovi", "No_ovi"),
rep = c("1", "2", "3", "4")))
#check the matrix array
ovi_assay_inj_feed
# Cochran-Mantel-Haenszel test
mantelhaen.test(ovi_assay_inj_feed)
#Figure 5c bottom
#ds2181 (dsEcK2) feed before injection
ovi_assay_feed_inj <-
array(c(0, 0, 31, 36,
2, 2, 18, 19,
3, 4, 20, 17),
dim = c(2, 2, 3),
dimnames = list(
dsRNA = c("dsGFP", "ds2181"),
Response = c("ovi", "No_ovi"),
rep = c("1", "2", "3")))
#check the matrix array
ovi_assay_feed_inj
# Cochran-Mantel-Haenszel test
mantelhaen.test(ovi_assay_feed_inj)
© 2022 GitHub, Inc.
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
if(!require(dplyr)){install.packages("dplyr")}
if(!require(DescTools)){install.packages("DescTools")}
if(!require(ggplot2)){install.packages("ggplot2")}
if(!require(grid)){install.packages("grid")}
if(!require(vcd)){install.packages("vcd")}
#Figure 5b
#ds2181 (dsEcK2) feed before injection
sperm_assay <-
array(c(17, 16, 2, 6,
19, 6, 19, 2,
17, 4, 14, 2),
dim = c(2, 2, 3),
dimnames = list(
dsRNA = c("dsGFP", "ds2181"),
Response = c("sperm", "No_sperm"),
rep = c("1", "2", "3")))
#check the matrix array
sperm_assay
# Cochran-Mantel-Haenszel test
mantelhaen.test(sperm_assay)
#Figure 5c top
#ds2181 (dsEcK2) injection before feed
ovi_assay_inj_feed <-
array(c(2, 8, 16, 9,
2, 10, 32, 21,
3, 8, 20, 14,
0, 6, 42, 25),
dim = c(2, 2, 4),
dimnames = list(
dsRNA = c("dsGFP", "ds2181"),
Response = c("ovi", "No_ovi"),
rep = c("1", "2", "3", "4")))
#check the matrix array
ovi_assay_inj_feed
# Cochran-Mantel-Haenszel test
mantelhaen.test(ovi_assay_inj_feed)
#Figure 5c bottom
#ds2181 (dsEcK2) feed before injection
ovi_assay_feed_inj <-
array(c(0, 0, 31, 36,
2, 2, 18, 19,
3, 4, 20, 17),
dim = c(2, 2, 3),
dimnames = list(
dsRNA = c("dsGFP", "ds2181"),
Response = c("ovi", "No_ovi"),
rep = c("1", "2", "3")))
#check the matrix array
ovi_assay_feed_inj
# Cochran-Mantel-Haenszel test
mantelhaen.test(ovi_assay_feed_inj)
© 2022 GitHub, Inc.
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
if(!require(dplyr)){install.packages("dplyr")}
if(!require(DescTools)){install.packages("DescTools")}
if(!require(ggplot2)){install.packages("ggplot2")}
if(!require(grid)){install.packages("grid")}
if(!require(vcd)){install.packages("vcd")}
#Figure 5b
#ds2181 (dsEcK2) feed before injection
sperm_assay <-
array(c(17, 16, 2, 6,
19, 6, 19, 2,
17, 4, 14, 2),
dim = c(2, 2, 3),
dimnames = list(
dsRNA = c("dsGFP", "ds2181"),
Response = c("sperm", "No_sperm"),
rep = c("1", "2", "3")))
#check the matrix array
sperm_assay
# Cochran-Mantel-Haenszel test
mantelhaen.test(sperm_assay)
#Figure 5c top
#ds2181 (dsEcK2) injection before feed
ovi_assay_inj_feed <-
array(c(2, 8, 16, 9,
2, 10, 32, 21,
3, 8, 20, 14,
0, 6, 42, 25),
dim = c(2, 2, 4),
dimnames = list(
dsRNA = c("dsGFP", "ds2181"),
Response = c("ovi", "No_ovi"),
rep = c("1", "2", "3", "4")))
#check the matrix array
ovi_assay_inj_feed
# Cochran-Mantel-Haenszel test
mantelhaen.test(ovi_assay_inj_feed)
#Figure 5c bottom
#ds2181 (dsEcK2) feed before injection
ovi_assay_feed_inj <-
array(c(0, 0, 31, 36,
2, 2, 18, 19,
3, 4, 20, 17),
dim = c(2, 2, 3),
dimnames = list(
dsRNA = c("dsGFP", "ds2181"),
Response = c("ovi", "No_ovi"),
rep = c("1", "2", "3")))
#check the matrix array
ovi_assay_feed_inj
# Cochran-Mantel-Haenszel test
mantelhaen.test(ovi_assay_feed_inj)
#Figure 5c top
#ds2181 (dsEcK2) injection before feed
ovi_assay_inj_feed <-
array(c(2, 8, 16, 9,
2, 10, 32, 21,
3, 8, 20, 14,
0, 6, 42, 25),
dim = c(2, 2, 4),
dimnames = list(
dsRNA = c("dsGFP", "ds2181"),
Response = c("ovi", "No_ovi"),
rep = c("1", "2", "3", "4")))
#check the matrix array
ovi_assay_inj_feed
# Cochran-Mantel-Haenszel test
mantelhaen.test(ovi_assay_inj_feed)
mantelhaen.test(ovi_assay_inj_feed, alternative = "two.sided")
shiny::runApp('E:/OneDrive - Harvard University/research/Flam lab/RNAseq and Array/201905-201808/120analysis/nodsEcR/Shiny_EcR_RNAseq_v3.1/ShinyEcRNAseqDEG')
for (p in c("shiny", "DT", "htmltools", "ggplot2","data.table","tidyverse","httr","jsonlite","curl","RCurl","ggbeeswarm"))
{
if (!requireNamespace(p, quietly = TRUE))
install.packages(p, dependencies = TRUE)
}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(BiocManager)
BiocManager::install("DESeq2")
BiocManager::install("EnhancedVolcano")
runApp('E:/OneDrive - Harvard University/research/Flam lab/RNAseq and Array/201905-201808/120analysis/nodsEcR/Shiny_EcR_RNAseq_v3.1/ShinyEcRNAseqDEG')
